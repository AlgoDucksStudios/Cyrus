name: Publish NuGet Packages

on:
  push:
    branches:
      - main

jobs:
  publish:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '6.0.x'  # Update to the correct version if needed

      - name: Install NuGet
        uses: NuGet/setup-nuget@v1.0.5

      - name: Clean up build files (before)
        run: |
          $excluded_dirs = @("packages", "tests", "Cyrus.DB")
          Get-ChildItem -Directory | ForEach-Object {
            if ($excluded_dirs -notcontains $_.Name) {
              Remove-Item -Recurse -Force -ErrorAction Ignore "$($_.FullName)\bin"
              Remove-Item -Recurse -Force -ErrorAction Ignore "$($_.FullName)\obj"
            }
          }

      - name: List .csproj files
        run: |
          $projects = Get-ChildItem -Recurse -Filter *.csproj | Where-Object { $_.FullName -notmatch "Cyrus.DB" }
          if ($projects.Count -eq 0) {
            Write-Error "No .csproj files found."
            exit 1
          }
          $projects | ForEach-Object { Write-Host "Found project: $($_.FullName)" }

      - name: Restore dependencies
        run: |
          $projects = Get-ChildItem -Recurse -Filter *.csproj | Where-Object { $_.FullName -notmatch "Cyrus.DB" }
          foreach ($project in $projects) {
            nuget restore $project.FullName
          }

      - name: Build and pack NuGet packages
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        run: |
          $projects = Get-ChildItem -Recurse -Filter *.csproj | Where-Object { $_.FullName -notmatch "Cyrus.DB" }
          foreach ($project in $projects) {
            dotnet build $project.FullName -c Release
            dotnet pack $project.FullName -c Release --output ./bin/Release
            $nupkgFile = Get-ChildItem -Path "./bin/Release" -Filter '*.nupkg' | Select-Object -First 1
            if ($nupkgFile) {
              nuget push "$($nupkgFile.FullName)" -ApiKey $NUGET_API_KEY -Source https://api.nuget.org/v3/index.json
            } else {
              Write-Host "No nupkg file found in $($project.FullName)"
            }
          }

      - name: Clean up build files (after)
        run: |
          $excluded_dirs = @("packages", "tests", "Cyrus.DB")
          foreach ($dir in Get-ChildItem -Directory) {
            if ($excluded_dirs -notcontains $dir.Name) {
              Remove-Item -Recurse -Force -ErrorAction Ignore "$($dir.FullName)\bin"
              Remove-Item -Recurse -Force -ErrorAction Ignore "$($dir.FullName)\obj"
            }
          }
